{

  "select" : {
    "kids"                            : "SELECT U.id, CONCAT('KID', U.kid) AS kid, U.user_name AS user_name, U.kana, U.server, U.userkey, U.db_password, U.fenics_key, U.number_pc, IFNULL(CLT.client_number, 0) AS client_number, REPLACE(LIC.services, ':', '') AS license, U.number_id, CONCAT(start_id, '-', U.start_id + U.number_id) range_id, L.name AS creater, IFNULL(UPD.update_on, DATE_FORMAT(U.create_on, '%Y/%m/%d')) AS update_on, ENV.system_type, ENV.version, C_group.has_busiv, C_group.has_fenics, C_group.has_mobile, IFNULL(SM.mobile_number, 0) AS mobile_number, IFNULL(MO.is_marked,0) as is_marked, U.is_registered, DATE_FORMAT(U.register_on, '%Y/%m/%d') AS register_on, sa_company, sa_name, sa_tel, sa_email, se_company, se_name, se_tel, se_email, em_company, em_name, em_tel, em_email FROM kids AS U LEFT JOIN login_users AS L ON U.create_user_id = L.id LEFT JOIN environments AS ENV ON U.environment_id = ENV.id LEFT JOIN (SELECT kids_id, CASE WHEN SUM(has_busiv) > 0 THEN 1 ELSE 0 END AS has_busiv, CASE WHEN SUM(has_fenics) > 0 THEN 1 ELSE 0 END AS has_fenics, CASE WHEN SUM(has_mobile) > 0 THEN 1 ELSE 0 END AS has_mobile FROM customers GROUP BY kids_id) C_group ON U.id = C_group.kids_id LEFT JOIN (SELECT kids_id, COUNT(kids_id) AS client_number FROM clients WHERE is_admin = 0 GROUP BY kids_id) CLT ON U.id = CLT.kids_id LEFT JOIN (SELECT kids_id, MAX(DATE_FORMAT(create_on, '%Y/%m/%d')) AS update_on FROM historys H GROUP BY kids_id) UPD ON UPD.kids_id = U.id LEFT JOIN licenses LIC ON LIC.kids_id = U.id LEFT JOIN partners P ON U.id = P.kids_id LEFT JOIN (SELECT kids_id, COUNT(kids_id) AS mobile_number FROM fenics WHERE is_mobile = 1 GROUP BY kids_id) SM ON U.id = SM.kids_id LEFT JOIN ( SELECT distinct kids_id, '1' as is_marked FROM memos where priority_id = '4' ) MO ON U.id = MO.kids_id ORDER BY kid DESC;",
    "customers"                       : "SELECT * FROM CUSTOMERS WHERE kids_id = ?;",
    "licenses"                        : "SELECT * FROM licenses WHERE kids_id = ?;" ,
    "clients"                         : "SELECT kids_id, client_id, client_pass, create_user_id, DATE_FORMAT( create_on, '%Y-%m-%d') as create_on, fenics_id, is_admin FROM clients where kids_id = ? order by client_id;",
    "fenics"                          : "SELECT kids_id, fenics_id, `password`, inet_ntoa(fenics_ip) as fenics_ip, pc_name, DATE_FORMAT( create_on, '%Y/%m/%d') as create_on, DATE_FORMAT( start_on, '%Y-%m-%d') as start_on, DATE_FORMAT( end_on, '%Y-%m-%d') as end_on, is_mobile FROM customer.fenics WHERE kids_id = ?;",
    "busivs"                          : "select * from busivs where kids_id = ?;",
    "partners"                        : "SELECT * FROM partners WHERE kids_id = ?;",
    "mobiles"                         : "SELECT M.kids_id, M.base_id, M.fenics_key, IFNULL(S.client_number, 0) AS client_number, M.admin_id, M.admin_pw, M.city_cd, M.office_cd FROM mobiles M LEFT JOIN (SELECT kids_id, COUNT(kids_id) AS client_number FROM fenics WHERE is_mobile = 1 GROUP BY kids_id) S ON M.kids_id = S.kids_id WHERE M.kids_id = ?;",
    "memos"                           : "SELECT M.id, kids_id, title, priority_id, CASE priority_id WHEN 1 THEN 'emergency' WHEN 2 THEN 'important' WHEN 3 THEN 'reminder' WHEN 4 THEN 'special' ELSE '' END AS priority, message, case when CHAR_LENGTH(message) > 10 then CONCAT( LEFT(message, 10), '...') else message end as short_msg, date_format( ifnull( update_on, create_on ), '%Y/%m/%d') as create_on, L.name FROM memos M left join login_users L on ifnull( M.update_user_id, M.create_user_id ) = L.id where kids_id = ? order by create_on desc, id desc;",
    "usrHistorys"                     : "SELECT type, content_name, item_name, `before`, `after`, CASE WHEN type = '更新' THEN CASE WHEN (`before` = '' or `before` is null) and ( `after` != '' or `after` != null )THEN CONCAT(`after`, 'に設定されました') WHEN (`before` != '' or `before` != null) and (`after` = '' or `after` is null )THEN CONCAT(`before`, 'が削除されました') ELSE CONCAT(`before`, 'から', `after`, 'に更新されました') END WHEN type = '削除' THEN CONCAT(`item_name`, 'が削除されました') WHEN type = '追加' then concat(item_name, 'が追加されました') ELSE NULL END AS msg, DATE_FORMAT(create_on, '%Y-%m-%d %H:%i:%s') AS create_on, L.name AS creater FROM HISTORYS H LEFT JOIN login_users L ON H.create_user_id = L.id WHERE kids_id = ? ORDER BY create_on DESC;",

    "servers"                         : "SELECT * FROM servers order by name, ip, version;",
    "memo_templates"                  : "SELECT id, title, msg, LEFT(msg, 15) as short_msg FROM memo_templates order by id;",
    "users"                           : "SELECT * FROM login_users where uid = ? and password = ?;",
    "header"                          : "SELECT * FROM columns where uid = 0;",
    "show_columns"                    : "SELECT * FROM columns where uid = ?;",
    "services"                        : "SELECT * FROM services;",
    "base_info"                       : "SELECT * FROM CUSTOMERS WHERE kid = ?;",
    "historys"                        : "SELECT H.id, K.kid, H.type, H.content_name, H.item_name, H.`before`, H.`after`, DATE_FORMAT( H.create_on, '%Y/%m/%d') AS create_on, L.name FROM historys H LEFT JOIN login_users L ON H.create_user_id = L.id left join kids K on K.id = H.kids_id ORDER BY id DESC LIMIT 10;",
    "moreHistorys"                    : "SELECT H.id, K.kid, H.type, H.content_name, H.item_name, H.`before`, H.`after`, DATE_FORMAT( H.create_on, '%Y/%m/%d') as create_on, L.name FROM historys H left join login_users L on H.create_user_id = L.id left join kids K on K.id = H.kids_id where H.id < ? order by id desc limit 11;",
    "find_new_userkey"                : "SELECT userkey FROM kids WHERE userkey = ?;",
    "find_new_kid"                    : "SELECT kid FROM kids WHERE environment_id = ? order by kid desc;",
    "find_new_db_password"            : "SELECT db_password from kids WHERE db_password = ?;",
    "environments"                    : "SELECT * FROM environments;",
    "find_environment_id"             : "select id from environments where system_type = ? and version = ?;",
    "is_unique_fenicskey"             : "SELECT fenics_key FROM kids WHERE fenics_key = ?;",
    "is_unique_fenicskey_for_update"  : "SELECT kid FROM kids WHERE fenics_key = ?;",
    "is_unique_userkey_for_update"    : "SELECT kid FROM kids WHERE userkey = ?;",
    "is_unique_db_password_for_update": "SELECT kid FROM kids WHERE db_password = ?;",
    "is_unique_kid_for_update"        : "SELECT kid FROM kids WHERE kid = ?;",
    "get_new_fenics_ip"               : "SELECT CASE SUBSTRING_INDEX(INET_NTOA(fenics_ip), '.', - 1) WHEN 254 THEN fenics_ip + 3 ELSE fenics_ip + 1 END AS next_ip FROM fenics F RIGHT JOIN kids K ON K.id = F.kids_id ORDER BY fenics_ip DESC LIMIT 1;",
    "find_last_fenics_id"             : "select fenics_id from fenics where kids_id = ? and is_mobile = 0 order by fenics_id desc limit 1;",
    "find_last_mobile_fenics_id"      : "select fenics_id from fenics where kids_id = ? and is_mobile = 1 order by fenics_id desc limit 1;",
    "find_last_client_id"             : "SELECT client_id FROM clients where kids_id = ? and is_admin = 0 order by client_id desc limit 1;",
    "find_last_base_id"               : "SELECT base_id FROM customers WHERE kids_id = ?",
    "get_version_by_kid"              : "SELECT version FROM kids K left join environments E on K.environment_id = E.id where K.id = ?",
    "get_services_by_version"         : "select * from services where version = ?;",
    "available_number_in_each_server" : "select GRP.server, GRP.pc_number, 80 - GRP.pc_number as available_number, S.version from (SELECT server, SUM(number_pc) as pc_number FROM kids K WHERE server != '' GROUP BY server) GRP left join servers S on GRP.server = S.name order by server;",
    "get_add_info_each_month"         : "select DATE_FORMAT(create_on, '%Y/%m') as month, ifnull(sum(case item_name when 'ユーザー作成' THEN val else null end ),0) as user, ifnull(sum(case item_name when 'クライアント数' THEN val else null end ),0) as client, ifnull(sum(case item_name when '端末台数' THEN val else null end ),0) as pc, version from (( SELECT 'ユーザー作成' AS item_name, 1 as val, create_on, E.version FROM kids K left join environments E on K.environment_id = E.id ) UNION ALL ( SELECT item_name, `after` - `before` AS diff, H.create_on, E.version FROM historys H LEFT JOIN kids K ON H.kid = K.kid LEFT JOIN environments E ON K.environment_id = E.id WHERE item_name = 'クライアント数' OR item_name = '端末台数' and `after` - `before` > 0 )) AS T GROUP BY DATE_FORMAT(create_on, '%Y/%m'), version;",
    "all_fenics"                      : "SELECT id, kids_id, fenics_id, `password`, inet_ntoa(fenics_ip) as fenics_ip, DATE_FORMAT( start_on, '%Y/%m/%d') as start_on, DATE_FORMAT( end_on, '%Y/%m/%d') as end_on, is_mobile, DATE_FORMAT( create_on, '%Y/%m/%d') as create_on FROM customer.fenics;",
    "is_unique_fenics_ip"             : "SELECT fenics_id from fenics where fenics_ip = INET_ATON(?);",
    "available_number_in_each_server" : "SELECT GRP.server, GRP.pc_number, S.capacity - GRP.pc_number AS available_number, S.version FROM (SELECT server, SUM(number_pc) AS pc_number FROM kids K WHERE server != '' GROUP BY server) GRP LEFT JOIN servers S ON GRP.server = S.name UNION SELECT type, pc_number, capacity - pc_number, WEB.version FROM (SELECT type, version, capacity FROM customer.servers WHERE type = 'WEB') WEB LEFT JOIN (SELECT SUM(number_pc) AS pc_number, version FROM kids K RIGHT JOIN servers S ON S.name = K.server GROUP BY version) GRP ON WEB.version = GRP.version order by server;",
    "get_add_info_in_each_month"      : "select DATE_FORMAT(create_on, '%Y/%m') as month, ifnull(sum(case item_name when 'ユーザー作成' THEN val else null end ),0) as user, ifnull(sum(case item_name when 'クライアント数' THEN val else null end ),0) as client, ifnull(sum(case item_name when '端末台数' THEN val else null end ),0) as pc, version from (( SELECT 'ユーザー作成' AS item_name, 1 as val, create_on, E.version FROM kids K left join environments E on K.environment_id = E.id ) UNION ALL ( SELECT item_name, `after` - `before` AS diff, H.create_on, E.version FROM historys H LEFT JOIN kids K ON H.kid = K.kid LEFT JOIN environments E ON K.environment_id = E.id WHERE item_name = 'クライアント数' OR item_name = '端末台数' and `after` - `before` > 0 )) AS T GROUP BY DATE_FORMAT(create_on, '%Y/%m'), version;",
    "get_add_info_in_three_month"     : "SELECT D.month, IFNULL(user, 0) AS user, IFNULL(client, 0) AS client, IFNULL(pc, 0) AS pc, D.version FROM (SELECT DATE_FORMAT(create_on, '%Y/%m') AS month, IFNULL(SUM(CASE item_name WHEN 'ユーザー作成' THEN val ELSE NULL END), 0) AS user, IFNULL(SUM(CASE item_name WHEN 'クライアント数' THEN val ELSE NULL END), 0) AS client, IFNULL(SUM(CASE item_name WHEN '端末台数' THEN val ELSE NULL END), 0) AS pc, version FROM ((SELECT 'ユーザー作成' AS item_name, 1 AS val, register_on AS create_on, E.version FROM kids K LEFT JOIN environments E ON K.environment_id = E.id) UNION ALL (SELECT item_name, `after` - `before` AS diff, H.create_on, E.version FROM historys H LEFT JOIN kids K ON H.kids_id = K.id LEFT JOIN environments E ON K.environment_id = E.id WHERE (item_name = 'クライアント数' OR item_name = '端末台数') AND (`after` - `before` > 0))) AS T GROUP BY DATE_FORMAT(create_on, '%Y/%m') , version) TMP right join ( select ? as month, 'ES' as version union all select ? , 'LM' union all select ?, 'ES' union all select ?, 'LM' union all select ?, 'ES' union all select ?, 'LM' ) D on TMP.month = D.month and TMP.version = D.version order by D.version, D.month;",
    "events"                          : "SELECT id, title, message, DATE_FORMAT(start_on, '%Y年%m月%d日') AS start_on_for_view, DATE_FORMAT(start_time, '%k時%i分') as start_time_for_view, DATE_FORMAT(start_on, '%Y-%m-%d') AS start_on, DATE_FORMAT(start_time, '%k:%i') as start_time, date_format(start_on, '%e') as date, is_finished FROM events where date_format( start_on, '%Y-%m') = ? order by start_on;",
    "login_user"                      : "SELECT id, name, newadd, is_admin FROM login_users where ?;",
    "login_users"                     : "SELECT id, name, newadd, is_admin, case newadd when 1 then '未登録' when 0 then case is_admin when 0 then '一般' when 1 then '管理者' end end as status FROM login_users;"
  },

  "update" : {
    "date"          : "UPDATE USERS SET updateDate = ? WHERE kid = ?",
    "client_number" : "UPDATE USERS SET client_number = ? WHERE kid = ?",
    "columns"       : "UPDATE columns SET kid = ?, company = ?, server = ?, userKey = ?, genics = ?, name = ?, client_number = ?, update_on = ? WHERE uid = ?;",
    "customers"     : "UPDATE customers SET ? WHERE ?",
    "partners"      : "UPDATE partners SET ? WHERE ?",
    "licenses"      : "UPDATE licenses SET ? WHERE ?",
    "kids"          : "UPDATE kids SET ? WHERE ?",
    "memos"         : "UPDATE memos SET ? WHERE ?",
    "servers"       : "UPDATE servers SET ? WHERE id = ?;",
    "fenics"        : "UPDATE fenics SET ? WHERE fenics_id = ?;",
    "clients"       : "UPDATE clients SET ? WHERE client_id = ?;",
    "busivs"        : "UPDATE busivs SET ? WHERE ?;",
    "mobiles"       : "UPDATE mobiles SET ? WHERE ?;",
    "events"        : "UPDATE events SET ? WHERE ?;",
    "memo_templates" : "UPDATE memo_templates SET ? WHERE ?;",
    "login_user_info" : "UPDATE login_users set ? WHERE ?;"
  },

  "insert" : {
    "historys"            : "INSERT INTO historys SET ?;",
    "make_user"           : "INSERT INTO kids set ?;",
    "clients"             : "INSERT INTO clients set ?;",
    "make_fenics_account" : "INSERT INTO fenics set ?",
    "make_memo"           : "INSERT INTO memos set ?",
    "make_client"         : "INSERT INTO clients set ?;",
    "services"            : "INSERT INTO services set ?",
    "servers"             : "INSERT INTO servers set ?",
    "make_login_account"  : "INSERT INTO login_users set ?",
    "add_base"            : "INSERT INTO customers set ?",
    "make_busiv"          : "INSERT INTO busivs set ?",
    "make_mobiles"        : "INSERT INTO mobiles set ?",
    "events"              : "INSERT INTO events set ?;",
    "memo_templates"      : "INSERT INTO memo_templates set ?;"
  },

  "delete" : {
    "kids"     : "DELETE FROM kids where ?;",
    "clients"  : "DELETE FROM clients where ?;",
    "fenics"   : "DELETE FROM fenics where ?;",
    "memos"    : "DELETE FROM memos where ?;",
    "events"   : "DELETE FROM events where ?;",
    "services" : "DELETE FROM services where version = ?;",
    "servers"  : "DELETE FROM servers where version = ?;",
    "memo_templates" : "DELETE FROM memo_templates where ?;"
  }
}

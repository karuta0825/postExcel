機械学習

・猫の画像から猫を判定するものが、機械学習


機械学習は、アルゴリズムを作成するのがソフトウェア
普通は、人間がアルゴリズムを書くのが、ソフトウェア開発

機械にデータからパターンを見つけてもらうもの。
時々、正解データを教えてやる必要がある。

Modelとは、どうロジックを組み立てるのか？
データとアルゴリズムをinputにして、パターンをみつけてもらう。


・データ　＞　セレクトデータ　＞　該当列を選択
・トレーニングデータを作成（8training:2test）
・決定木
・なんの列を学習させたいのか？　収入
・モデルの検証のために、scoreingする
・evaluation


モデルができる
スコアモデルによる結果
学習結果が現実的ではないとき、データがおかしいということで疑うのだ。
ROC曲線を使って、視覚的に判断することができる。

・どのアルゴリズムを使えばいいのか？
チートシートがある

　分類わけ（２クラス：二項分類、３クラス以上）
　　classfication
　　教師あり

　データ予測（品質管理など）
　　regression(回帰直線などに使用できる)
　　教師あり　

  クラスタリング
  　教師なし
  　例）顧客セグメントを分けることにある

　異常検知（Iotでよく利用される）

列のことをfeatureと呼ぶ。feature内で揃える必要がある。
outputを、labelと呼ぶ。ラベリングすることで正解かどうか判断できる

サンプルを使うことで、自分の近い環境を探し、試していけば良いのである。

■技術者の罠
linerとnon-liner
ニューラルネットワーク

■deep learning
結果との誤差をフィードバックで更新する

機械学習は、統計理論にもとづいている。
deep learningは、理論に基づいてるのではなく、計算量が莫大となる。
データ量がものをわけである。

FPGA、TPU
などが、deeplearningに最適化したプロセッサとなる。
データ自体が、大きくないので、プロセッサのコア数も大きくある必要もなく、
専用化したものが要求される。

統計で扱えないデータ、音声、言語、画像がdeeplearningが得意な分野。
さらにデータが大量に必要。

データに対する知見が必要。
だから、業務の知識を知らないとそれ以上すすめることができなし、
できる人は業務について非常によく理解できるようになっていることになる。

■テスト駆動開発
t-wada
ワイルド・サバンナ

テスト駆動開発入門　ケント・ベック著絶版
今夏出版予定

「動作するきれいなコード」序文。

動作するきれいなコード
きれい、汚い（オレンジの道）
すぐには動かない、動作する（青の道）
の二次元

1. きれいですぐには動かないコード（伝統）
2. 汚い動作するコード（書いて動かしてからきれいにする）

1.の問題点
　やってみるとそれまで必要なかったなどある。
　動かしてみないとわからない問題
　実際コードを書いて動作するまでに時間が短いので、ついていけない。

2.の問題点
　動くからいいじゃないという堕落
　たくさん作らないといけないので、あきらめる
　せっかく動くまでところまで来たのに、きれいにすることで動かくなるという恐れ。


テスト駆動開発は、
　２の問題点を克服するもの
　
1. 次の目標を考える
2. その目標を示すテストを書く
3. そのテストを実行して失敗させる（red）
   動作する最小限のコードを書いて失敗させる
4. 目的のコードを書く
5. ２で書いたテストを成功させる(Green)
6. テストが通るままでリファクタリングを行う(Refactor)
7. 1-6をくりかえる

red -> green -> refactoring -> red
あとでリファクタリングすると、失敗する
それが完了することがないから。ビジネス上の価値がないため、
それが実行されることがないからである。リファクタリングを独立させては行けない。

使っているものを毎日、出しては片付けてるときれいなままである。
なので、リファクタリングを常に開発の中にいれることがテスト駆動開発のポイント
となる。

デモ
FizzBuzz問題

1. 問題を書く
TODO
==============================
   文章をわける。
- [ ] 数を文字列にして返す
- [ ] ３の倍数
- [ ] ５の倍数
- [ ] ３の倍数　


1. ファイル名をつけるFizzBuzzTest

   テストのメソッドは、日本語にする（開発者が日本人ならばそれでいい）
   具体性がここで必要になる
   - 前準備
   - 実行
   - 検証
   順番は、下から書いていく。ゴールから先にかく
   asserEquals("1", fizzbuzz.convert(1));


   - 前準備
     FizzBuzz fizzbuzz = new FizzBuzz();
   - 実行
   - 検証
     asserEquals("1", fizzbuzz.convert(1));


   複数のアサーションするときは、複数のメソッドをつくるのがよい。
   テストごとにメソッドを増やして実行するのがよい。

   テストコードのためのテストをおこなうのが必要だった。
   イミテーションテスト


３回テストするときは、
前準備としてでnewするようにする


具体的すぎると、仕様がわからなくなる問題がある
- メソッド名を長くして、仕様名をわかりやすくする
- 入れ子形式にする
- テストの対称性
- テスト件数は、最小限におさえる必要がある。

問題を小さく
歩幅を調整する
テストの構造化とリファクタリング

* PaaSを活用したハイコストパフォーマンスなウェブサイト構築・運用・メンテナンス
  1. ウェブサイト構築の基礎
  2. WebAppsウェブサイト運用と更新
  3. Virtual machine or Web Apps


** クラウドのメリット
  画像１
  
*** とある会話
    クラウドらしくないウェブサーバの蔓延
    virtual machine - linux - appach構成
    これではクラウドを上手に行かせていない

** ウェブサーバーのあるべき姿
   ノンストップ 24時間 x 365日
   定期メンテナンスの排除
   事前に告知してもビジネスには多大な悪影響がでてしまう

*** 定期メンテナンスでサービスを停止しないといけない理由
    OS・ランタイムの更新
    アプリケーションの更新
    ウェブサーバー１台構成のため

** 問題解決のためには、
   単一構成から、複数台構成が必要

** ウェブサイト冗長構成
   ロードバランサー - 2つのウェブサーバー
   ２つのWebとロードバランサーの費用が問題
   この改善をクラウドでやすくするのだ

** Azure
   azureのLBは、冗長構成で無料だ
   画像２

** Web APPsで構築すると
   定期メンテナンスなし
   止まらないウェブサイト構築はPaasなクラウドがおすすめ

** デモ web apps
 - PHPのバージョン変更
 - 仮想マシンの変更

** web appsウェブサイト向けpaas
   画像３

** app serviceの構成略図
   画像４
   LBが自動でwebappsを見つけてつながるようにする

** web apps ウェブサイト運用と構築

*** web appsの運用設定
    - OS・ランタイムの構築
      - 自動
      - メジャーアップデートはユーザ管理
      - OSSについては、サポート停止後使えなくなる
    - バックアップ（ハードディスクは壊れないのでデータなくならない）
      - web appの機能を利用
      - コンテンツ+databaseのdump
    - ログ収集
      - Storage活用
	普通は、ローカルのドライブとして保存されるので、それを別で保存できる
    - 死活監視
    - デプロイ

*** demo

 - ログ収集
   - ファイルシステムに書くのか
   - blobに書くのか
   - ストレージに書くのか
 - 死活監視
   - 可用性テスト

** web appsのセキュリティ考慮点

- 公開ウェブサイト（外的セキュリティ考慮）
  - オープンポート
  - プレインストールOS・ランタイム　-> 自動更新
  - 独自インストールラインタイム。アプリケーション -> ユーザー更新
- デプロイ方法
  - コンテンツデプロイ手段と資格情報
    - webdeploy
      - 
    - FTP/FTPS
    - OneDrive / Dropbox / GitHub / BitBucket
      - 各サービスアカウント

** 資格情報の漏洩経路と予防・対策
漏洩は人から
資格情報を知っている人を最小構成
資格情報を使いまわさない

** 更新プロセス
   画像５

** iaas passか？
   azureでiaasで使われたら負けだよね？
   
   - Paas利用時の自動更新の問題
   - ファイアーウォール・IDS, WAFなどの導入で安全は確保できると思っている
   - テスト自動化しない理由とその結果
     - テストを自動化する場合、その分の追加費用が発生します
     - テスト自動化していないと、都度テストで工数かかる

** 更新プログラムやバージョンアップでアプリが動かなくなるパターン
   - 変則的な記述・処理
   - 相当古いバージョンから最新バージョンへの更新
   - 更新プログラム適用で動作しなくなるのはまれ

** クロームのレンダリングエンジンは2ヶ月に一回更新される

** 現在のウェブサイト構築運用では

 - クライアント・サーバーともに最新環境を意識
 - 

** まとめ
- ウェブサイトは、定期メンテナンスによる停止が発生しない構成に
- 更新プログラムの起動
- テスト自動化
- 運用コスト低減おためPaas
   



    











